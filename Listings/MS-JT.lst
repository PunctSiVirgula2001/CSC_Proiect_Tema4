C51 COMPILER V9.59.0.0   MS_JT                                                             02/28/2024 20:32:40 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MS_JT
OBJECT MODULE PLACED IN .\Objects\MS-JT.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE MS-JT.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\BIG8051\Include) DEBUG O
                    -BJECTEXTEND PRINT(.\Listings\MS-JT.lst) TABS(2) OBJECT(.\Objects\MS-JT.obj)

line level    source

   1          #include <c8051F040.h>  // declaratii SFR
   2          #include <wdt.h>
   3          #include <osc.h>
   4          #include <port.h>
   5          #include <uart0.h>
   6          #include <uart1.h>
   7          #include <lcd.h>
   8          #include <keyb.h>
   9          #include <Protocol.h>
  10          #include <UserIO.h>
  11          
  12          nod retea[NR_NODURI];         // retea cu 5 noduri
  13          
  14          unsigned char STARE_COM = 0;    // starea initiala a FSA COM
  15          unsigned char TIP_NOD = 0;    // tip nod initial: Slave sau No JET
  16          unsigned char STARE_IO  = 0;    // stare interfata IO - asteptare comenzi
  17          unsigned char ADR_MASTER;       // adresa nod master - numai MS
  18          
  19          extern unsigned char AFISARE;   // flag permitere afisare
  20          
  21          //********************************************************************************************************
             -***
  22          void TxMesaj(unsigned char i);  // transmisie mesaj destinat nodului i
  23          unsigned char RxMesaj(unsigned char i);   // primire mesaj de la nodul i
  24          
  25          //********************************************************************************************************
             -***
  26          void main (void) {
  27   1        unsigned char i, found; // variabile locale
  28   1        
  29   1        WDT_Disable();                        // dezactiveaza WDT
  30   1        SYSCLK_Init();                      // initializeaza si selecteaza oscilatorul ales in osc.h
  31   1        UART1_Init(NINE_BIT, BAUDRATE_COM);   // initilizare UART1 - port comunicatie (TxD la P1.0 si RxD la P1.1)
  32   1        UART1_TxRxEN (1,1);                 // validare Tx si Rx UART1
  33   1        
  34   1        PORT_Init ();                         // conecteaza perifericele la pini (UART0, UART1) si stabileste tipul pinilor
  35   1      
  36   1        LCD_Init();                           // 2 linii, display ON, cursor OFF, pozitia initiala (0,0)
  37   1        KEYB_Init();                          // initializare driver tastatura matriciala locala
  38   1        UART0_Init(EIGHT_BIT, BAUDRATE_IO);   // initializare UART0  - conectata la USB-UART (P0.0 si P0.1)
  39   1      
  40   1        Timer0_Init();                  // initializare Timer 0
  41   1      
  42   1        EA = 1;                               // valideaza intreruperile
  43   1        SFRPAGE = LEGACY_PAGE;                // selecteaza pagina 0 SFR
  44   1        
  45   1        for(i = 0; i < NR_NODURI; i++){   // initializare structuri de date
  46   2          retea[i].full = 0;            // initializeaza buffer gol pentru toate nodurile
  47   2          retea[i].bufasc[0] = ':';       // pune primul caracter in buffer-ele ASCII ":"
  48   2        }
  49   1      
  50   1        Afisare_meniu();                // Afiseaza meniul de comenzi
  51   1        
  52   1        while(1){                       // bucla infinita
C51 COMPILER V9.59.0.0   MS_JT                                                             02/28/2024 20:32:40 PAGE 2   

  53   2                                      
  54   2          switch(STARE_COM){
  55   3            case 0:
  56   3      
  57   3      #if(PROTOCOL == MS)                 // nodul este slave, asteapta mesaj complet si corect de la master  
  58   3      
  59   3              switch(RxMesaj(ADR_NOD)){       // asteapta un mesaj de la master
  60   4                case TMO:               // anunta ca nodul curent devine master
  61   4                                        // nodul curent devine master
  62   4                                        // Afiseaza meniul de comenzi
  63   4                                        // trece in starea 2
  64   4                                        // primul slave va fi cel care urmeaza dupa noul master
  65   4                        break;
  66   4      
  67   4                case ROK:                 break;  // a primit un mesaj de la master, il afiseaza si trebuie sa raspunda
  68   4                case POK: STARE_COM = 1;  break;    
  69   4                case CAN:                 break;  // afiseaza eroare Mesaj incomplet
  70   4                case TIP:                 break;  // afiseaza eroare Tip mesaj necunoscut
  71   4                case ESC:                 break;  // afiseaza Eroare SC
  72   4                default:                  break;  // afiseaza cod eroare necunoscut, asteapta 1 sec
  73   4              }
  74   3              break;
  75   3      #endif
  76   3      
  77   3      #if(PROTOCOL == JT) // nodul nu detine jetonul, asteapta un mesaj util sau jetonul
                      
                      switch(RxMesaj(ADR_NOD)){         // asteapta jetonul de la master
                        case TMO:
                                                        // anunta ca nodul a regenerat jetonul 
                                                        // nodul curent detine jetonul
                                                        // Daca e permisa afisarea, afiseaza meniul de comenzi
                                                        // trece in starea 1
                          break;
              
                        case ROK:                   break;            // a primit un mesaj USER_MES, il afiseaza
                        case JOK:                   // a primit un jetonul
                          
                          Delay(WAIT/2);            // asteapta WAIT/2 ms
                        
                                                          // adresa HW dest este adr_hw_src
                                                          // adresa HW src este ADR_NOD
                                                          // tip mesaj = JET_MES
                                                          // transmite mesajul JET_MES din bufferul ADR_NOD
                                                          // nodul curent detine jetonul
                          if(AFISARE)                     // Daca e permisa afisarea, afiseaza meniul de comenzi    
                                                          // trece in starea 1
                          break; // nodul detine jetonul, poate trece sa transmita un mesaj de date
              
                        case CAN:                       break;    // afiseaza eroare Mesaj incomplet
                        case CAN_adresa_hw_src:         break;    // afiseaza eroare Mesaj incomplet (adresa_hw_src)
                        case CAN_tipmes:                break;    // afiseaza eroare Mesaj incomplet (tip mesaj)
                        case CAN_sc:                    break;    // afiseaza eroare Mesaj incomplet (sc)
                        case TIP:                       break;    // afiseaza eroare Tip mesaj necunoscut
                        case ESC:                       break;        // afiseaza Eroare SC
                        default:                        break;      // afiseaza cod eroare necunoscut, apoi asteapta 1 sec
                      }
                      break;
              #endif                
 111   3      
 112   3            case 1:                     
 113   3      
 114   3      #if(PROTOCOL == MS)                   // nodul este slave, transmite mesaj catre master     
C51 COMPILER V9.59.0.0   MS_JT                                                             02/28/2024 20:32:40 PAGE 3   

 115   3                                      
 116   3                                              // cauta sa gaseasca un mesaj util de transmis
 117   3                              
 118   3                                      
 119   3                                      
 120   3                                    
 121   3                                  
 122   3                                          // daca gaseste un nod i
 123   3                                            // pune adresa HW dest este ADR_MASTER
 124   3                                            // transmite mesajul catre nodul i
 125   3                                      
 126   3                                          // daca nu gaseste, construieste un mesaj in bufferul ADR_MASTER
 127   3                                            // adresa HW dest este ADR_MASTER
 128   3                                            // adresa HW src este ADR_NOD
 129   3                                            // tip mesaj = POLL_MES
 130   3                                            // transmite mesajul din bufferul ADR_MASTER
 131   3                                    
 132   3                                      // trece in starea 0, sa astepte un nou mesaj de la master
 133   3              break;
 134   3      #endif
 135   3      
 136   3      #if(PROTOCOL == JT)             // nodul detine jetonul, poate transmite un mesaj USER_MES        
                      
                      
                                                    // cauta sa gaseasca un mesaj util de transmis
                
              
              
              
              
                                                        // daca gaseste un mesaj de transmis catre nodul i
                                                          // adresa HW dest este dest
                                                          // transmite mesajul catre nodul i
                                                          // asteapta procesarea mesajului la destinatie (WAIT/2 msec)
              
                                                  // va incerca sa transmita jetonul nodului urmator 
                                                  // trece in starea 2, sa transmita jetonul urmatorului nod
              #endif  
 153   3              
 154   3            break;  
 155   3              
 156   3            case 2:                     // tratare stare 2 si comutare stare
 157   3      
 158   3      #if(PROTOCOL == MS)                     // nodul este master, tratare stare 2 si comutare stare
 159   3                                    
 160   3                                        // selecteaza urmatorul slave (incrementeaza i)
 161   3                                        
 162   3                                  
 163   3                                  
 164   3        
 165   3                                        // adresa HW dest este i
 166   3                                        // daca in bufferul i se afla un mesaj util, il transmite
 167   3                                        // altfel, construieste un mesaj de interogare in bufferul i
 168   3                                        // adresa HW src este ADR_NOD
 169   3                                        // tip mesaj = POLL_MES
 170   3                                        // transmite mesajul din bufferul i
 171   3                                    
 172   3                                      // trece in starea 3, sa astepte raspunsul de la slave-ul i
 173   3      
 174   3      #endif
 175   3      
 176   3      #if(PROTOCOL == JT)                     // nodul transmite jetonul urmatorului nod    
C51 COMPILER V9.59.0.0   MS_JT                                                             02/28/2024 20:32:40 PAGE 4   

                      
                                                      // selecteaza urmatorul slave (incrementeaza i)
                        
                
                
                
                      Delay(WAIT/2);                  // asteapta WAIT/2 sec
                      
                                                      // adresa HW dest este i
                                                      // adresa HW src este ADR_NOD
                                                      // tip mesaj = JET_MES
                                                      // transmite mesajul din bufferul i
                                                      // trece in starea 3, sa astepte confirmarea de la nodul i ca jetonul a fost primit
              #endif
 191   3      
 192   3            break;
 193   3      
 194   3            case 3:
 195   3      
 196   3      #if(PROTOCOL == MS)                   // nodul este master, asteapta mesaj de la slave  
 197   3      
 198   3            // nodul este slave, asteapta mesaj de la master  
 199   3              switch(RxMesaj(i)){           // asteapta un raspuns de la slave i
 200   4                case TMO:                         // afiseaza eroare Timeout nod i
 201   4                      
 202   4                        break;
 203   4                case ROK:                         break;  // a primit un mesaj, il afiseaza
 204   4                case POK: break;              
 205   4      
 206   4                case ERI:                         break;  // afiseaza Eroare incadrare
 207   4                case ERA:                         break;  // afiseaza Eroare adresa
 208   4                case TIP:                         break;  // afiseaza Tip mesaj necunoscut
 209   4                case OVR:                         break;  // afiseaza Eroare suprapunere
 210   4                case ESC:                         break;  // afiseaza Eroare SC
 211   4                case CAN:                         break;  // afiseaza mesaj incomplet
 212   4      
 213   4                case TEST:                       break;         // afiseaza Eroare TEST
 214   4                default:                            break;  // afiseaza Eroare necunoscuta, apoi asteapta 1000ms
 215   4              }
 216   3                                      // revine in starea 2 (a primit sau nu un raspuns de la slave, trece la urmatorul slave)
 217   3      
 218   3      #endif
 219   3      
 220   3            
 221   3      #if(PROTOCOL == JT)         
                      switch(RxMesaj(ADR_NOD)){                 // asteapta un raspuns de la nod i
                        case TMO: Error("\n\rTimeout nod ");    // afiseaza eroare Timeout nod i
                              
              
                                                                // revine in starea 2 (nu a primit raspuns)
                              break;
                        case JOK:                               // a primit confirmarea transferului jetonului, revine in starea 0
                                                                // nodul nu mai detine jetonul
                                                                // daca afisarea e permisa, afiseaza meniul
                              break;
                        case ERI:                               // afiseaza Eroare incadrare
                                                                // revine in starea 0
                                                                // nodul nu mai detine jetonul
                                                                // afiseaza meniul
                                  break;      
                        case ERA:                               // afiseaza Eroare adresa
                                                                // revine in starea 0
C51 COMPILER V9.59.0.0   MS_JT                                                             02/28/2024 20:32:40 PAGE 5   

                                                                // nodul nu mai detine jetonul
                                                                // afiseaza meniul
                                  break;      
                        
                        case CAN:                               // afiseaza Mesaj incomplet
                                                                // revine in starea 0
                                                                // nodul nu mai detine jetonul
                                                                // afiseaza meniul
                                  break;      
                        
                        case TIP:                               // afiseaza Tip mesaj necunoscut
                                                                // revine in starea 0
                                                                // nodul nu mai detine jetonul
                                                                // afiseaza meniul
                                  break;      
                        
                        case ESC:                               // afiseaza Eroare SC
                                                                // revine in starea 0
                                                                // nodul nu mai detine jetonul
                                                                // afiseaza meniul
                                  break;      
              
                        default:                                // afiseaza Eroare necunoscuta
                                                                // asteapta 1000 ms
                                                                // revine in starea 0
                                                                // nodul nu mai detine jetonul
                                                                // afiseaza meniul
                                  break;      
                    }
                      
              #endif
 270   3            
 271   3            break;      
 272   3          }
 273   2          
 274   2          UserIO();             // apel functie interfata
 275   2        }
 276   1      }
*** WARNING C280 IN LINE 27 OF MS-JT.c: 'found': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    169    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    279       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
